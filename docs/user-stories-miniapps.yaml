mini_apps:

  - id: joke_of_the_moment
    title: Joke of the Moment
    description: >
      Displays a random joke from a selected category and type (e.g., programming, pun, dark). Designed to bring quick comic relief.
    data_source:
      api: "https://v2.jokeapi.dev/"
      method: GET
      params:
        category: "Any or user-defined"
        type: "single or twopart"
      auth_required: false
    behavior:
      - Fetch a joke at runtime using category/type filters
      - Present joke text in console-readable format
      - Handle both single and two-part joke formats
      - for two-part format, the first part is displayed, and the use must press a button for the second part to be displayed
    notes:
      - Consider sanitizing content with blacklistFlags (e.g., "nsfw", "religious", etc.)
    status: scaffolded
    implementation_notes: |
      - Scaffolding complete: main.py implements run(stop_event, api) with JokeAPI integration, two-part joke handling, and error display.
      - manifest.json includes all config, data source, and instructions; assets/ created.
    todo:
      - Test with real hardware and API
      - Improve UI/UX for punchline reveal
      - Add more robust error handling and content filtering
      - Add unit tests with hardware mocks

  - id: quote_of_the_day
    title: Quote of the Day
    description: >
      Fetches and displays a quote from one of several sources—ranging from motivational to literary to Shakespearean.
    data_sources:
      - name: They Said So
        api: "https://theysaidso.com/api/"
        auth_required: true
      - name: Quotable
        api: "https://api.quotable.io/random"
        auth_required: false
      - name: Shakespeare
        method: local_data
        source: "https://shakespeare.folger.edu/downloads/"
    behavior:
      - Rotate between APIs or allow user selection of quote category
      - Display quote text with author attribution
      - preferred style of quote (eg: motivational etc) stored in config file for the app 
    notes:
      - The Shakespeare source requires local text parsing or preprocessed excerpts
    status: scaffolded
    implementation_notes: |
      - Scaffolding complete: main.py implements run(stop_event, api) with source selection, API fallback, and error display.
      - manifest.json includes all config, data sources, and API key instructions; assets/ created.
    todo:
      - Implement full Shakespeare/local data support
      - Add user config for category/source
      - Add error handling and UI polish
      - Add unit tests with hardware mocks

  - id: current_weather
    title: Current Weather
    description: >
      Displays real-time weather for the user's preset or geolocated location. Meant for daily planning or travel awareness.
    data_sources:
      - Open-Meteo: "https://api.open-meteo.com/v1/forecast"
      - Met.no: "https://api.met.no/weatherapi/locationforecast/2.0/"
    auth_required: false
    behavior:
      - latitude and longitude stored in config file for the app
      - Display temperature, cloud cover, wind, rain
    notes:
      - Open-Meteo supports JSON and is optimized for embedded devices
    status: scaffolded
    implementation_notes: |
      - Scaffolding complete: main.py implements run(stop_event, api) with Open-Meteo integration and config-driven location.
      - manifest.json includes config, data sources, and instructions; assets/ created.
    todo:
      - Add support for Met.no and geolocation
      - Improve weather formatting and error handling
      - Add unit tests with hardware mocks

  - id: flights_leaving_heathrow
    title: Flights Leaving Heathrow
    description: >
      Provides a list of upcoming departures from Heathrow Airport including airline, gate, and time.
    data_source:
      api: "https://aviationstack.com/"
      auth_required: true
      plan: "Free tier includes limited real-time data"
    behavior:
      - Query departures from airport code EGLL
      - Display next 5–10 flights with summary data
    fallback:
      - Web scraping from heathrow.com may be considered if API becomes limited or inaccurate
    notes:
      - Respect API rate limits; cache results for short intervals

  - id: breaking_news
    title: Breaking News
    description: >
      Displays global or regional breaking news headlines in summary form.
    data_sources:
      - NewsData.io: "https://newsdata.io/"
      - GNews: "https://gnews.io/api/v4/search"
    auth_required: true
    behavior:
      - Allow filtering by country, keyword, or category (e.g., technology, science)
      - Display headline, source, and timestamp

  - id: bird_sightings_near_me
    title: Bird Sightings Near Me
    description: >
      Shows recent bird species observed in a user-defined area using citizen-scientist data.
    data_source:
      api: "https://api.ebird.org/v2/data/obs/geo/recent"
      auth_required: true
    behavior:
      - latitude, longitude, radius stored in config file for the app
      - Output: bird species name, observation count, location
    notes:
      - Requires user to register for free eBird API token
    status: scaffolded
    implementation_notes: |
      - Scaffolding complete: main.py implements run(stop_event, api) with eBird API integration and config-driven location.
      - manifest.json includes config, data source, and API key instructions; assets/ created.
    todo:
      - Test with real API and hardware
      - Add error handling and UI polish
      - Add unit tests with hardware mocks

  - id: random_useless_fact
    title: Random Useless Fact
    description: >
      Displays an amusing and often bizarre fact with no practical application—perfect for a chuckle.
    data_source:
      api: "https://uselessfacts.jsph.pl/random.json?language=en"
      auth_required: false
    behavior:
      - Fetch and display fact of the moment
    notes:
      - API is simple and requires no input parameters
    status: scaffolded
    implementation_notes: |
      - Scaffolding complete: main.py implements run(stop_event, api) with Useless Facts API integration.
      - manifest.json includes all config and instructions; assets/ created.
    todo:
      - Test with real API and hardware
      - Add error handling and UI polish
      - Add unit tests with hardware mocks

  - id: on_this_day
    title: On This Day in History
    description: >
      Provides notable historical events, births, and deaths on today’s date.
    data_source:
      api: "https://byabbe.se/on-this-day/"
      auth_required: false
    behavior:
      - Extract current date and request events
      - Display multiple summaries chronologically
    notes:
      - Supports filtering by event type
    status: scaffolded
    implementation_notes: |
      - Scaffolding complete: main.py implements run(stop_event, api) with byabbe.se API integration and date-based lookup.
      - manifest.json includes all config and instructions; assets/ created.
    todo:
      - Add event type filtering and UI polish
      - Add error handling and unit tests with hardware mocks

  - id: word_of_the_day
    title: Word of the Day
    description: >
      Educates users with a new English word and its definition, pronunciation, and usage.
    data_source:
      api: "https://api.wordnik.com/v4/words.json/wordOfTheDay"
      auth_required: true
    behavior:
      - Fetch daily word with part of speech and usage example
      - Display structured output
    status: scaffolded
    implementation_notes: |
      - Scaffolding complete: main.py implements run(stop_event, api) with Wordnik API integration and config-driven API key.
      - manifest.json includes config, data source, and API key instructions; assets/ created.
    todo:
      - Test with real API and hardware
      - Add error handling and UI polish
      - Add unit tests with hardware mocks

  - id: moon_phase
    title: Moon Phase
    description: >
      Shows the current phase of the moon, as well as sunset/sunrise data for your location.
    data_source:
      api: "https://api.ipgeolocation.io/astronomy"
      auth_required: true
    behavior:
      - coordinates or IP-based geolocation stored in config file for the app
      - Output: moon phase name, illumination, rise/set times
    status: scaffolded
    implementation_notes: |
      - Scaffolding complete: main.py implements run(stop_event, api) with ipgeolocation.io API integration and config-driven location.
      - manifest.json includes config, data source, and API key instructions; assets/ created.
    todo:
      - Test with real API and hardware
      - Add error handling and UI polish
      - Add unit tests with hardware mocks

  - id: today_in_music
    title: Today in Music
    description: >
      Shares a music-related highlight that occurred on this day in history or trending track data.
    data_source:
      api: "https://www.last.fm/api"
      auth_required: true
    behavior:
      - Optionally filter by tag (e.g., "rock", "classical")
      - Display artist, track, event description
    notes:
      - Requires registration for a free API key
    status: scaffolded
    implementation_notes: |
      - Scaffolding complete: main.py implements run(stop_event, api) with Last.fm API integration and config-driven tag.
      - manifest.json includes config, data source, and API key instructions; assets/ created.
    todo:
      - Test with real API and hardware
      - Add error handling and UI polish
      - Add unit tests with hardware mocks

  - id: space_update
    title: Space Update
    description: >
      Displays astronomy content such as NASA's Astronomy Picture of the Day or Mars rover photos.
    data_source:
      api: "https://api.nasa.gov/"
      auth_required: true
    behavior:
      - Select random endpoint (e.g., APOD, Mars photos)
      - Show headline and summary
    notes:
      - Free API key available for public use
    status: scaffolded
    implementation_notes: |
      - Scaffolding complete: main.py implements run(stop_event, api) with NASA API integration and random endpoint selection.
      - manifest.json includes config, data source, and API key instructions; assets/ created.
    todo:
      - Test with real API and hardware
      - Add error handling and UI polish
      - Add unit tests with hardware mocks

  - id: tiny_poem
    title: Tiny Poem or Haiku
    description: >
      Displays a short poem from a curated collection of contemporary works.
    data_source:
      api: "https://www.poemist.com/api/v1/randompoems"
      auth_required: false
    behavior:
      - Fetch and display poem title, body, and poet
    status: scaffolded
    implementation_notes: |
      - Scaffolding complete: main.py implements run(stop_event, api) with Poemist API integration.
      - manifest.json includes all config and instructions; assets/ created.
    todo:
      - Test with real API and hardware
      - Add error handling and UI polish
      - Add unit tests with hardware mocks

  - id: local_tide_times
    title: Local Tide Times
    description: >
      Provides tide predictions for the user's local coast or harbor.
    data_source:
      api: "https://www.worldtides.info/api"
      auth_required: true
    behavior:
      - Input: coordinates
      - Output: next high and low tides with time
    notes:
      - Requires free registration with API key
    status: scaffolded
    implementation_notes: |
      - Scaffolding complete: main.py implements run(stop_event, api) with WorldTides API integration and config-driven location.
      - manifest.json includes config, data source, and API key instructions; assets/ created.
    todo:
      - Test with real API and hardware
      - Add error handling and UI polish
      - Add unit tests with hardware mocks

  - id: random_emoji_combo
    title: Random Emoji Combo
    description: >
      Displays a whimsical or mysterious sequence of emojis to inspire, confuse, or amuse.
    data_source:
      method: static_json
      source: "https://github.com/github/gemoji"
      auth_required: false
    behavior:
      - Load emoji table into memory
      - Randomly select and display 2–5 emojis
    status: scaffolded
    implementation_notes: |
      - Scaffolding complete: main.py implements run(stop_event, api) with emoji table loaded from assets/emoji.json.
      - manifest.json includes all config and instructions; assets/ created (emoji.json required).
    todo:
      - Download and include emoji.json in assets/
      - Test with real hardware
      - Add error handling and UI polish
      - Add unit tests with hardware mocks

  - id: dad_joke_generator
    title: Dad Joke Generator
    description: >
      Fetches a groan-worthy one-liner from the official Dad Joke API.
    data_source:
      api: "https://icanhazdadjoke.com/"
      headers:
        Accept: "application/json"
      auth_required: false
    behavior:
      - Fetch and display joke as a single-line punchline
    status: scaffolded
    implementation_notes: |
      - Scaffolding complete: main.py implements run(stop_event, api) with icanhazdadjoke.com API integration.
      - manifest.json includes all config and instructions; assets/ created.
    todo:
      - Test with real API and hardware
      - Add error handling and UI polish
      - Add unit tests with hardware mocks

  - id: top_trending_search
    title: Top Trending Search
    description: >
      Displays the top search trend for the current day from Google Trends data.
    data_source:
      api: "https://github.com/pat310/google-trends-api"
      method: unofficial_nodejs_lib
    behavior:
      - Fetch trending keyword with rank
    notes:
      - Requires use of Node.js scraper (no official public API)
    status: scaffolded
    implementation_notes: |
      - Scaffolding complete: main.py implements run(stop_event, api) with local Node.js backend integration (see README).
      - manifest.json includes all config and instructions; assets/ created.
    todo:
      - Implement/test Node.js backend
      - Test with real hardware
      - Add error handling and UI polish
      - Add unit tests with hardware mocks

  - id: name_that_animal
    title: Name That Animal
    description: >
      Presents a random animal's name, facts, and image to educate and delight.
    data_source:
      api: "https://zoo-animal-api.herokuapp.com/animals/rand"
      auth_required: false
    behavior:
      - Fetch animal name, image URL, and 1–2 facts
    status: scaffolded
    implementation_notes: |
      - Scaffolding complete: main.py implements run(stop_event, api) with Zoo Animal API integration.
      - manifest.json includes all config and instructions; assets/ created.
    todo:
      - Test with real API and hardware
      - Add error handling and UI polish
      - Add unit tests with hardware mocks

  - id: color_of_the_day
    title: Color of the Day
    description: >
      Selects a daily color and displays its name, hex code, and palette inspiration.
    data_source:
      api: "https://www.colourlovers.com/api/colors/random"
      format: JSON or XML
      auth_required: false
    behavior:
      - Extract and display hex code and title
    status: scaffolded
    implementation_notes: |
      - Scaffolding complete: main.py implements run(stop_event, api) with ColourLovers API integration (XML parsing).
      - manifest.json includes all config and instructions; assets/ created.
    todo:
      - Test with real API and hardware
      - Add error handling and UI polish
      - Add unit tests with hardware mocks

  - id: flight_status_favorite_airline
    title: Flight Status for Favourite Airline
    description: >
      Shows the live status of flights for a user-specified airline, including delays, destinations, and gates.
    data_source:
      api: "https://aviationstack.com/"
      auth_required: true
    behavior:
      - airline IATA code (e.g., BA for British Airways) stored in config file for the app
      - Output: list of flights including departure time, status, and destination
    notes:
      - Useful for frequent travelers or those picking up passengers
      - May reuse logic from flights_leaving_heathrow mini-app
    status: scaffolded
    implementation_notes: |
      - Scaffolding complete: main.py implements run(stop_event, api) with Aviationstack API integration and config-driven airline code.
      - manifest.json includes config, data source, and API key instructions; assets/ created.
    todo:
      - Test with real API and hardware
      - Add error handling and UI polish
      - Add unit tests with hardware mocks

  - id: constellation_of_the_night
    title: Constellation of the Night
    description: >
      Displays a featured constellation based on the user's location and time of night, ideal for stargazers and astronomy enthusiasts.
    data_source:
      method: stellarium_web_scrape_or_local
      source: "https://stellarium-web.org/"
      auth_required: false
    behavior:
      - coordinates  stored in config file for the app
      - Determine which constellations are overhead
      - Highlight one with descriptive info
    notes:
      - Stellarium has an open source engine you could host locally for offline mode
    status: scaffolded
    implementation_notes: |
      - Scaffolding complete: main.py implements run(stop_event, api) with placeholder constellation display (future: Stellarium integration).
      - manifest.json includes all config and instructions; assets/ created.
    todo:
      - Implement real constellation lookup (Stellarium/local data)
      - Test with real hardware
      - Add error handling and UI polish
      - Add unit tests with hardware mocks

  - id: public_domain_book_snippet
    title: Public Domain Book Snippet
    description: >
      Displays a short passage from classic literature in the public domain to spark curiosity or reflection.
    data_source:
      method: local_or_scraped
      source: "https://www.gutenberg.org/"
      auth_required: false
    behavior:
      - Randomly select a book
      - Extract and display a paragraph or dialogue snippet
    notes:
      - Files available in plain text; preloading several titles is recommended
    status: scaffolded
    implementation_notes: |
      - Scaffolding complete: main.py implements run(stop_event, api) with random snippet from local .txt files in assets/.
      - manifest.json includes all config and instructions; assets/ created (add .txt files).
    todo:
      - Add .txt book files to assets/
      - Test with real hardware
      - Add error handling and UI polish
      - Add unit tests with hardware mocks

  - id: random_local_place_name
    title: Random Local Place Name
    description: >
      Displays a randomly selected place name from a local dataset or API.
    data_sources:
      - assets/places.json: >
          Local file containing a list of place names (JSON array or one per line).
      - api (optional):
          Configure an API endpoint in manifest.json if using an online source.
    behavior:
      - Load a random place name from assets/places.json or API
      - Display the place name using the provided API
    notes:
      - If assets/places.json is missing, display an error or fallback message
    status: scaffolded
    implementation_notes: |
      - Scaffolding complete: main.py implements run(stop_event, api) with placeholder for loading from assets/places.json or API.
      - manifest.json includes config, data sources, and instructions; assets/ created (add places.json).
    todo:
      - Add places.json to assets/
      - Implement place name loading logic
      - Add error handling and UI polish
      - Add unit tests with hardware mocks

  - id: internet_speed_check
    title: Internet Speed Check
    description: >
      Measures and displays current internet download/upload speed and ping.
    data_sources:
      - speedtest-cli: >
          Local Python library for measuring internet speed.
      - api (optional):
          Use an online API if available/configured.
    behavior:
      - Run speedtest-cli or API to measure download, upload, and ping
      - Display results using the provided API
    notes:
      - speedtest-cli must be installed in the environment
    status: scaffolded
    implementation_notes: |
      - Scaffolding complete: main.py implements run(stop_event, api) with placeholder for speedtest-cli integration.
      - manifest.json includes config, data sources, and instructions; assets/ created.
    todo:
      - Implement speedtest logic
      - Add error handling and UI polish
      - Add unit tests with hardware mocks

  - id: list_all_apps
    title: Mini-App Directory Viewer
    description: >
      Displays a paginated list of all available mini-apps by reading their number, name, and description from configuration files.
      Designed to help users quickly browse and locate mini-apps by ID and purpose.
    data_sources:
      - bossconfiguration.json: >
          Contains the mapping between mini-app numbers and their corresponding directories.
      - manifest.json (per mini-app): >
          Contains metadata such as 'name' and 'description' used for display.
      - config.json (this app): >
          May define pagination settings like entries per page and styling preferences.
    ui_behavior:
      layout:
        format: "Tabular list per page: Number | Name | Short Description"
        entries_per_page: configurable (default: 15)
      navigation:
        if_yellow_button_available:
           yellow_led : true
        if_blue_button_available:
           blue_led : true   
        yellow_button:
          action: previous_page
          description: "Move one page up in the list"
        blue_button:
          action: next_page
          description: "Move one page down in the list"
      edge_cases:
        if_last_page:
          disable_blue_button: true
          disable_blue_led: true
        if_first_page:
          disable_yellow_button: true
          disable_yellow_led: true
      updates:
        dynamic_redraw_on_navigation: true
    behavior:
      - Load bossconfiguration.json
      - Sort mini-apps by number (ascending)
      - For each mini-app:
          - Load manifest.json
          - Extract 'name' and 'description'
      - Paginate results based on config
      - Display formatted screen content with paging indicators
    example_entry_format: |
      101  | Word of the Day     | Learn a new word with definition and usage.
      102  | Weather Snapshot    | Shows current weather data for your location.
    notes:
      - Intended as a standalone navigable catalog.
      - UI should handle scrolling animations or screen clearing to maintain legibility.
      - this mini-app must be number 000
    status: scaffolded
    implementation_notes: |
      - Scaffolding complete: main.py implements run(stop_event, api) with placeholder for loading bossconfiguration.json and manifest.json files, and paginated display logic.
      - manifest.json includes config, data sources, and navigation instructions; assets/ created.
    todo:
      - Implement app listing and pagination logic
      - Add error handling and UI polish
      - Add unit tests with hardware mocks
